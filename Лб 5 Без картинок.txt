ЛР №5
Проектування БД, нормалізація, створення таблиць (головний ключ, обмеження, зовнішній ключ, зв'язку, довідкова цілісність) і завантаження даних
1. Проаналізувати приклад універсального відношення. З'ясувати які його колонки містять надлишкові дані. Виконати нормалізацію універсального
відношення, розбивши його на кілька таблиць.
2. Скласти SQL-script, що виконує:
a. Створення таблиць бази даних. Команди для створення таблиці повинні містити головний ключ, обмеження типу null / not null, default, check,
створення зв'язків з умовами посилальної цілісності
b. Завантаження даних в таблиці
3. Побудувати діаграму зв'язків таблиць бази даних використовуючи інструмент Designer.
4. Створити зв’язки в базі даних між таблицями.
a. Вивчити роботу створення зв’язків між таблицями в полі Designer
b. Створити майстром e Designer кілька варіантів зв’язків у базі даних
c. Проаналізувати і пояснити особливості зв’язків, створених Designer
d. Порівняти з тими, що написані самостійно.
e. Зробити висновки
5. Створити і перевірити представлення для отримання універсального відношення з набору нормалізованих таблиць бази даних.

1. Проаналізувати приклад універсального відношення. З'ясувати які його колонки містять надлишкові дані. Виконати нормалізацію універсального
відношення, розбивши його на кілька таблиць.
Найєфективніще буде винести до окремих таблиць колонки Видавництво, Тема, та Категорія.
2. Скласти SQL-script, що виконує:
a. Створення таблиць бази даних. Команди для створення таблиці повинні містити головний ключ, обмеження типу null / not null, default, check,
створення зв'язків з умовами посилальної цілісності
Створення таблиці book_category:
CREATE TABLE IF NOT EXISTS book_category (
    `id` INT NOT NULL,
    `Category` VARCHAR(40) CHARACTER SET utf8 NOT NULL,
);

Створення таблиці book_topic:
CREATE TABLE IF NOT EXISTS book_topic (
    `id` INT NOT NULL,
    `Topic` VARCHAR(40) CHARACTER SET utf8
);
Створення таблиці book_production
CREATE TABLE IF NOT EXISTS book_production (
    `id` INT NOT NULL,
    `Production` VARCHAR(26) CHARACTER SET utf8
);
b. Завантаження даних в таблиці
INSERT INTO book_category VALUES (1,'Підручники'),
	(2,'Апаратні засоби ПК'),
	(3,'Захист і безпека ПК'),
	(4,'Інші книги'),
	(5,'Windows 2000'),
	(6,'Unix'),
	(7,'Інші операційні системи'),
	(8,'C&C++'),
	(9,'SQL');

INSERT INTO book_topic VALUES (1,'Використання ПК в цілому'),
	(2,'Операційні системи'),
	(3,'Програмування');

INSERT INTO book_production VALUES (1,'Видавнича група BHV'),
	(2,'Вільямс'),
	(3,'МикроАрт'),
	(4,'DiaSoft'),
	(5,'ДМК'),
	(6,'Триумф'),
	(7,'Эком'),
	(8,'Києво-Могилянська академія'),
	(9,'Університет "Україна"'),
	(10,'Вінниця: ВДТУ');
3. Побудувати діаграму зв'язків таблиць бази даних використовуючи інструмент Designer.
Скріншот додаю
4. Створити зв’язки в базі даних між таблицями.
ALTER TABLE `book` ADD FOREIGN KEY ( `Category_id` ) REFERENCES `book_category` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ;
ALTER TABLE `book` ADD FOREIGN KEY ( `Production_id` ) REFERENCES `book_production` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ;
ALTER TABLE `book` ADD FOREIGN KEY ( `Topic_id` ) REFERENCES `book_topic` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT ;
c. Проаналізувати і пояснити особливості зв’язків, створених Designer
Створено звязки один до багатьох, бо інші типи зв'язків є неефективними для цієї таблиці
e. Зробити висновки
Створені зв'язки зменшують завантаженність таблиці данними, та полегшують орієнтування у таблиці.
5. Створити і перевірити представлення для отримання універсального відношення з набору нормалізованих таблиць бази даних.
Запити для перевірки
SELECT book.Title, book_category.Category
FROM book
INNER JOIN book_category ON book.category_id=book_category.id;

SELECT book.Title, book_production.Production
FROM book
INNER JOIN book_production ON book.Production=book_production.id;